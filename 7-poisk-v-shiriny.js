// граф - обстрактная структура данных представляющая собой множество вершин и набор ребер те соединений между парами вершин (как карта где города соед между собой дорогами) те например найти путь из точки А в точку В за минимальное количество шагов

const graph = {};

// создается объект в котором поля это вершины и каждое поле равняется массиву вершин в которой есть путь
graph.a = ['b', 'c'];
graph.b = ['f'];
graph.c = ['d', 'e'];
graph.d = ['f'];
graph.e = ['f'];
graph.f = ['g'];

// тут будем использовать очередь - очередь это структура данных, состоящая из каких-либо элементов - принцип - элементы добавляются в конец структуры а извлекабся вначале
// first in - first out

// реализация функции поиска в ширину
function breadthSearch(graph, startPoint, endPoint) {
  // созд граф у нас тут это массив
  let queue = [];
  // сразу добавл стартовую вершину
  queue.push(startPoint);

  // пока в этой очереди есть хотя бы один элемент
  while (queue.length > 0) {
    // достаем текущую вершину из начала очереди
    const current = queue.shift();
    // далее в условии проверим
    if (!graph[current]) {
      graph[current] = []; // что бы программа не сломалась
    }
    if (graph[current].includes(endPoint)) {
      return true; // обошли весь граф и пришли к пункту назначения
    } else {
      queue = [...queue, ...graph[current]];
    }
  }
}

console.log(breadthSearch(graph, 'a', 'g')); // true - путь есть

// те находим путь за минимальное количество шагов и решает задачу поиска пути в графе
